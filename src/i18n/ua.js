export const ua = {
    "header": {
        "themeDark": "Встановити темну тему",
        "themeLight": "Встановити світлу тему"
    },
    "project": {
        "desc": "Опис",
        "React way of samurai": {
            "description": "Це був курс, що познайомив мене з ReactJS. У цьому курсі тема архітектури проєкту розглядалася докладно, тут я познайомився із такими концепціями, як архітектура FLUX та перший принцип SOLID, а саме принцип Simple responsibility. Також я тут ознайомився з ООП, HOC, HOOK та іншими поняттями. Тут я вивчив, як відправляти запити на сервер, використовуючи бібліотеку axios, та як працювати з API та API Docs. Цей курс розміщений на каналі 'it-kamasutra'. На жаль, у цьому курсі був дещо застарілий підхід, використовувались старі бібліотеки, не було TypeScript, і зараз такий код вважається legacy, але він надав мені дуже хорошу базу. Я час від часу переглядаю відео на цьому каналі. Також у цьому курсі було приділено увагу тестам за допомогою Jest.",
            "slider": {
                "Login page": "При вході на сайт, якщо користувач не авторизований, його перенаправляли на панель входу. API не дозволяло реєстрацію користувачів, але дозволяло авторизацію. Реєстрація проводилася на сайті 'https://social-network.samuraijs.com'. Інформація про користувача, а саме його ID, зберігалася в локальному сховищі, і саме тут я вивчив, як з ним працювати.",
                "Profile page": "Кожен користувач мав особисту сторінку профілю, на яку він міг перейти, натиснувши на свій нік в навігації. Тут містилася особиста інформація про кожного користувача. Під час створення цієї сторінки я вивчив, як отримувати дані з сервера для конкретного користувача. У цьому курсі менше уваги було приділено дизайну, тому в мене він вийшов не дуже добре.",
                "Edit profile": "Кожен користувач мав можливість змінити свою сторінку та змінити на ній все, що завгодно. Щоб перейти в цей режим, треба було натискати кнопку пензлика. У відео використовувався трохи другий спосіб переходу у режим редагування, але мені він здався нудним тому я вирішив зробити це по-своєму. Під час створення цієї сторінки я вивчив, як проводити валідацію форм (на жаль, використовувалася досить застаріла бібліотека, написана на ООП), а також я дізнався, як відправляти POST та PUT запити.",
                "Users page": "Ця сторінка відображала всіх користувачів, які зареєструвалися на вебсайті 'https://social-network.samuraijs.com', та показувала мінімальну інформацію про них; користувачі також мали можливість підписуватися та відписуватися. Тут я вивчив, як реалізувати пагінацію та додавати query параметри до GET-запиту. Також, клацнувши на користувача, ви переходили на його профіль.",
                "User page": "При переході на сторінку конкретного користувача відображалася вся доступна інформація про користувача, і цю інформацію не можна було змінити як свою власну."
            }
        },
        "Kids sport cherkas": {
            "description": "Я створив цей вебсайт на замовлення. На цьому сайті для публікування інформація про події у дитячому спорті в Черкасах. Для мене це був перший досвід створення сайту на замовлення. Того часу багато речей я не знав, проте через цей проєкт я вивчив багато нового, такого як взаємодія з клієнтом. Я не просто вигадав цей сайт сам, а клієнт надав конкретні завдання, які я втілив у життя. Зараз цей сайт не розміщено та він наразі не працює, але для нього вже написані як back-end, так і front-end. Розвиток зупинено через відсутність фінансування. Сайт повністю адаптований для різних пристроїв від 1640px до 320px. Я намагався писати код якнайчистіше, використовуючи архітектуру FLUX, проте тоді мої знання були недостатніми для створення повністю правильної архітектури. Зараз на сайті розміщено заповнювальний контент, не пов'язаний із дитячим спортом.",
            "slider": {
                "Main page": "Це головна сторінка сайта на якій в першій великій секції зображено 4 самі актуальні новини, при додаванні новини на сайт цей банер змінювався на більш актуальний. При кліку на один з цих банерів юзера повинно було перенаправляти на сторінку цієї новини, але це я не зміг зробити бо для цього повинен був бути розгорнутий сервер, а у клієнта на це не було грошей.",
                "News in main page": "Знаходячись на головній сторінці прогортавши вниз юзер попадав на остальні новини, перша і сама велика була сама актуальна новина по ній було більше всього інформації тобто заголовок, опис, дата та кнопка для переходу на цю новину. Трохи нижче були всі остальні новини. Я зробив захист якщо адмін додасть новину без назви чи без зображення то назва змінитися на None, а зображення на плейсхолдер з пустою картинкою, це було зроблено на випадок того що адмін міг додати зображення яке було пошкоджено.",
                "News page": "Сторінка 'Новини' це стрічка всіх новин сайта. Вона мала пошукове поле в якому мав здійснюватись пошук по новинам, але це не було ріализовано бо сервер не був разгорнут. У кожної новини було значення 'type' і вони за цим значення були розсортовані по сторінкам 'Футбол', 'Баскетбол' і тд. а тут були новини з усіма типами. Тут також відображається просто заглушки, а не справжні новини. Новини які мали інший тип тобто не футбол чи баскетбол своєї сторінки не мали тому були розміщені на сторінці 'Інші види'.",
                "About us page": "Сторінка 'Про нас' описувала усю суть сайта. Такі сторінки як 'Відео' чи 'Контакти' не були зроблені бо сайт було призупинено у розробці тому замість них там тимчасово висіла сторінка '404 error'.",
                "Admin page": "Якщо ти був адміном при переході на сторінку адмін тобі показувались кнопки де ти міг вийти з адмінсокго акаунта чи додати новину. Сторінка додавання новини мала дуже просту валідацію бо на той час я користуватись Formik не вмів, тому валідація була тільки лише на довжину. Після додавання новини вона одразу становилась най актуальною і показувалась першою на головній сторінці."
            }
        },
        "Github searcher": {
            "description": "Цей вебсайт створено для пошуку репозиторіїв за іменем користувача на GitHub. Я створив цей сайт по туторіалу з YouTube. Я переробляв цей сайт приблизно 4 рази, це був останній раз, коли я робив це повністю сам. Спочатку я хотів зрозуміти як це працює, а потім я відтворив свої знання на цьому вебсайті. Створюючи сайт, я навчився використовувати Redux Toolkit Query, а також приділив увагу створення кастомних хуків. Крім того, сайт передбачає роботу з localStorage. У відео з ютубу було показано простішу версію сайту, але я зробив її складнішою для власного навчання. Сайт повністю адаптивний для мобільних пристроїв.",
            "slider": {
                "Main page": "Головна сторінка сайта була зображена в дуже мінімалістичному стилі. Сайт має 2 сторінки 'Home' і 'Favourites', за допомогою react-router-dom і NavLink я зробив щоб показувало на якій сторінці юзер зараз знаходиться.",
                "Live search": "Коли юзер писав в github нікнейм то від 3 символів включався автопошук. При клікі на юзера відкривалась інформація про нього та цей випадаючий список зникав.",
                "User repositories": "При клікі на юзера відкривався список його репозиторіїв де і відображалась інформація о конкретному репозиторії. Також в правій частинні цієї репо-карти була зірка при клікі на яку репозиторій додавався в обране, якщо зірка була вже натиснута, то при клікі на неї репозиторій видалявся зі списку обраного.",
                'Favorites page': "'Обране' ця сторінка відображала вибрані репозиторії. Також була можливість видалити репозиторій з обраних, натиснувши на зірочку. Якщо у користувача не було вибраних репозиторіїв, відображалося повідомлення 'No items'. Вибрані репозиторії зберігалися в localStorage. Крім того, натискання на репозиторій перенаправляло користувача на його сторінку в GitHub.",
                "Showing error": "Крім того, якщо сервер видає помилку, вона відображатиметься як 'Something went wrong..."
            }
        },
        "Cat Money": {
            "description": "Cat Money – стартап із Молдови, де люди можуть виконувати та публікувати завдання, пов’язані з просуванням свого бізнесу в Інтернеті. Це був мій перший досвід роботи в команді. Це був комерційний проєкт, а не освітній, тому я тут нічого нового не дізнався. Зараз розробка призупинена через відсутність дизайнера. Вебсайт не був повністю реалізований з тієї ж причини. Я працював над зовнішнім інтерфейсом на основі дизайну від Figma та реалізував реєстрацію та вхід користувачів, а також обробку реєстрації та входу користувачів.",
            "slider": {
                "Main page": "Головна сторінка вебсайта повністю адаптована для всіх пристроїв, як і весь сайт. На сторінці є дві кнопки, хоча наразі вони не функціональні.",
                "Login page": "Сторінка входу з усіма перевірками, реалізованими за допомогою бібліотек Formik і Yup. Після успішного входу користувач перенаправлявся на головну сторінку, а замість кнопки «Увійти» в шапці була кнопка доступу до особистого профілю користувача. Наразі сервер не розгорнутий, тому реєстрація при відвідуванні сайту неможлива.",
                "Forgot password page": "Під час реєстрації, якщо користувач забув свій пароль, була можливість його скинути. Процес скидання пароля складався з двох сторінок: відправника електронної пошти та встановлення нового пароля. Після успішного заповнення цих форм користувач автоматично входив у систему з новим паролем і перенаправлявся на головну сторінку.",
                "Register page": "Сторінка реєстрації: Не вдасться зареєструвати обліковий запис з уже зареєстрованим логіном. Крім того, Yup використовувався для підтвердження та перевірки правильності введення пароля у полі 'Repeat password'.",
                "Please register": "Якщо користувач не був зареєстрований і намагався отримати доступ до певної сторінки, він перенаправлявся на сторінку 'Please register', вказуючи, що доступ до сайту обмежено для незареєстрованих користувачів. Ця сторінка зберегла старий дизайн, і якщо проєкт продовжить розвиватися, він буде оновлений."
            }
        },
        "next-project": {
            "description": "Я створив цей проєкт за допомогою курсу на YouTube, але я налаштував багато аспектів відповідно до своїх уподобань. Цей сайт створено з використанням Next.js 13 з app routing. На цьому сайті для аутентифікації користувачів я застосував Google Auth. Це full-stack програма із простим бекендом, хоча в більшості випадків я нічого не запам’ятав з бекенду, а просто переписував код. Я також розробив адаптацію сайту, і розробив дизайн у Figma.",
            "slider": {
                "Main page": "Головна сторінка дещо відрізняється дизайном від запропонованого у відео. UseContext від React був використаний для реалізації перемикача тем (темна/світла). Якщо користувач не зареєстрований, у header відображається значок для переходу на сторінку реєстрації, інакше, якщо зареєстрований, відображається значок для доступу до особистого облікового запису.",
                "Portfolio": "Сторінка портфоліо містила 3 ​​посилання, і якщо натиснути на одне з них, користувач буде перенаправлений на сторінку, яка розповідає про одну з тем, обраних користувачем. Тут було застосовано вкладену маршрутизацію: portfolio/[id].",
                "Posts": "Сторінка 'Posts' являла собою стрічку публікацій, доданих користувачами. Натискання будь-якої публікації викликало вбудовану маршрутизацію [id]. Ця сторінка разом із кількома іншими, які отримували дані з сервера, містила skeleton loading. На сторінці відображалася вся інформація про публікацію.",
                "Login page": "Сторінка входу автентифікувала користувачів. Користувачі могли вручну вводити свої дані або авторизуватися через Google. Якщо користувач раніше не мав облікового запису, він міг зареєструватися на сторінці реєстрації. Після аутентифікації або реєстрації користувач перенаправлявся до свого профілю.",
                "User profile": "Якщо зареєстрований користувач перейде до свого профілю, він потрапить на сторінку де зможе переглянути наявні публікації або створити нову. Натискання кнопки 'Create new post' відкриває модальне вікно з формою для створення нової публікації. Крім того, є кнопка 'log out', натискання на яку дозволяло вийти з облікового запису."
            }
        },
        'Doulingo clone': {
            "description": "В цьому сайті я намагався відтворити сайт Doulingo де користувачі можуть вивчати різні мови за допомогою дуже простої системи навчання. Робив я його дивлячись відео туторіал на youtube. Цей проєкт в першу чергу дуже повпливав на мою англійську через те, що дивився я це відео англійською мовою без субтитрів. Цей сайт є full-stack проєктом в якому я за допомогою Next Routes та Drizzle ORM зробив back-end частину сайту, тобто усі данні сайту беруться з бази даних. Також я додав можливість оформлювати місячну підписку за допомогою Stripe. Наразі цей сайт це бета-версія яку при бажанні можна розвинути до більш масштабного проєкта. Також він є повністю адоптований під усі пристрої. Реєстрацію та авторизацію на сайті я виконав за допомогою Clerk.",
            'slider': {
                'Marketing page': 'Вітальна сторінка зустрічає користувачів які тільки що зайшли на сайт. Тут можна зареєструватись та потім перейти до основної частини сайту.',
                'Learn page': 'Learn page - основна сторінка сайту де користувачі можуть зайти в урок та почати навчання або зайти у guidebook та повторити слова. Також праворуч розташовані промо-банери які містять корисну інформацію по сайту, для кожної сторінки вони різні.',
                'Guidebook page': 'Сторінка де користувач може подивитись які слова будуть у юніті, для кожного юніта слова унікальні. Відтворення слів я реалізував за допомогою бібліотеки react-use.',
                'Lesson page': "Сторінка уроку - це сторінка де користувач має вибирати правильні відповіді тим самим засвоювати матеріал зі сторінки guidebook. Є 2 типи завдань: вибрати по картинці та запам'ятати переклад, а потім більш складніше - вибрати правильне слово без картинки.",
                'Subscription': 'Переходячи на сторінку shop користувач міг натиснути на кнопку "unilimet hearts" і тоді його переносило на сторінку Stripe де він міг оформити місячну підписку та отримати нескінченні серця. Наразі це знаходиться у тестовому форматі тож оформити підписку можливо тільки якщо увімкнено сервер.'
            }
        },
        'Life in weeks': {
            'description': 'Скролячи інтернет я наткнувся на канал де якийсь чоловік знімав блог як він що тижня замальовує 1 квадратик на якійсь бумажці повній квадратиків та надписом "YOUR LIFE IN WEEKS", мене це зацікавило і я вирішив пошукати більше інформації на цю тему. Написавши запит у гугл "Your life in weeks" мені видало багато пропозицій купити банер де розписані по квадратикам 4 тисячі тижнів, як затверджувалось у статті це середня тривалість життя. Я став шукати ще, бо хотів перевірити цей банер онлайн, але так і не знайшов жодного сайту де була реалізована така можливість, тому я вирішив зробити це сам.',
            'slider': {
                'Life in weeks': 'На цьому сайті я намагався реалізувати функціонал як на фото.',
                'Choise your date of born': 'Заходячи на сайт користувача зустрічає модальне вікно в якому він повинен обрати свою дату народження яку при бажанні можна змінити потім. Також є кнопка "Remember me" натискаючи на яку користувачеві більше не потрібно буде вводити свою дату народження що разу як він заходить на сайт.',
                'Main page': 'Головна сторінка, на якій відображається "все життя". 1 квадратик - 1 тиждень. 1 ряд - 1 рік. Чорним показано час який користувач вже прожив, а не зафарбовані квадратики це те що йому залишилось прожити. Також якщо користувач наведе курсор на окремий квадратик, то він побачать скільки років йому було або буде - тут.',
                'Life schema': 'Натиснувши кнопку "Open schema" користувач відкриває маску яка відображає періоди його життя: дитинство, школа, університет, робота та пенсія. Чорним показано де саме зараз знаходиться користувач.',
                'Mobile version': 'Сайт звісно є адоптований під усі пристрої починаючи з пк і закінчуючи самими маленькими телефонами.'

            }
        },

        "buttons": {
            "visit": "Відвідати сайт",
            "code": "Подивитись код"
        },
        "tools": "Технології",
        "links": "Посилання"
    },
    "reverseFilter": "Від старих до нових",
    "defaultFilter": "Від нових до старих",
    "footer": "Створено і підтримуєтся •",
    "footerTitle": "Знайшли баг? Роскажіть мені:"
}